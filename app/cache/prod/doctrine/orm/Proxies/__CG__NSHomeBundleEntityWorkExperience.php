<?php

namespace Proxies\__CG__\NS\HomeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class WorkExperience extends \NS\HomeBundle\Entity\WorkExperience implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setOcupation($ocupation)
    {
        $this->__load();
        return parent::setOcupation($ocupation);
    }

    public function getOcupation()
    {
        $this->__load();
        return parent::getOcupation();
    }

    public function setCompagny($compagny)
    {
        $this->__load();
        return parent::setCompagny($compagny);
    }

    public function getCompagny()
    {
        $this->__load();
        return parent::getCompagny();
    }

    public function setRegion($region)
    {
        $this->__load();
        return parent::setRegion($region);
    }

    public function getRegion()
    {
        $this->__load();
        return parent::getRegion();
    }

    public function setCompagnyWebsite($compagnyWebsite)
    {
        $this->__load();
        return parent::setCompagnyWebsite($compagnyWebsite);
    }

    public function getCompagnyWebsite()
    {
        $this->__load();
        return parent::getCompagnyWebsite();
    }

    public function setCompagnyActivity($compagnyActivity)
    {
        $this->__load();
        return parent::setCompagnyActivity($compagnyActivity);
    }

    public function getCompagnyActivity()
    {
        $this->__load();
        return parent::getCompagnyActivity();
    }

    public function setAchievements($achievements)
    {
        $this->__load();
        return parent::setAchievements($achievements);
    }

    public function getAchievements()
    {
        $this->__load();
        return parent::getAchievements();
    }

    public function setFromDate($fromDate)
    {
        $this->__load();
        return parent::setFromDate($fromDate);
    }

    public function getFromDate()
    {
        $this->__load();
        return parent::getFromDate();
    }

    public function setToDate($toDate)
    {
        $this->__load();
        return parent::setToDate($toDate);
    }

    public function getToDate()
    {
        $this->__load();
        return parent::getToDate();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'ocupation', 'compagny', 'region', 'compagny_website', 'compagny_activity', 'achievements', 'from_date', 'to_date');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}